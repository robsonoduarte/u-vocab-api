plugins {
	id 'java'
	id 'groovy'
	id 'jacoco'
	id 'org.springframework.boot' version '3.2.0'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'org.sonarqube' version '4.3.0.3225'
	id 'com.avast.gradle.docker-compose' version '0.16.12'
	id 'com.diffplug.spotless' version '6.20.0'
	id 'com.bmuschko.docker-spring-boot-application' version '9.3.2'
	id "com.google.protobuf" version "0.9.4"
	id "io.freefair.lombok" version "8.4"
}

java {
	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

testing {
	suites {
		test {
			useJUnitJupiter()
		}
		integrationTest(JvmTestSuite) {
			dependencies {
				implementation project()
			}
			sources {
				java {
					srcDirs = ['src/it/java']
				}
				groovy {
					srcDirs = ['src/it/groovy']
				}
			}
		}
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	integrationTestImplementation.extendsFrom testImplementation
	integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

repositories {
	mavenCentral()
}

jacoco { toolVersion = "0.8.10" }

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	implementation 'com.google.protobuf:protobuf-java:3.24.3'
	implementation 'com.google.protobuf:protobuf-java-util:3.24.3'
	implementation 'io.jsonwebtoken:jjwt:0.12.6'

	runtimeOnly 'com.mysql:mysql-connector-j'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.codehaus.groovy:groovy:3.0.18'
	testImplementation 'org.spockframework:spock-core:2.4-M1-groovy-3.0'
	testImplementation 'org.spockframework:spock-spring:2.4-M1-groovy-3.0'
	testImplementation 'org.mockito:mockito-inline:5.2.0'
}

if (!project.hasProperty('noDockerCompose')) {
	dockerCompose {
		stopContainers = true
		removeContainers = true
		removeVolumes = true
		waitForTcpPorts = true
	}
	dockerCompose.isRequiredBy(integrationTest)
}

jacocoTestReport {
	executionData integrationTest
	reports {
		xml.required = true
	}
	dependsOn test,integrationTest
}

sonar {
	properties {
		property "sonar.projectKey", "robsonoduarte_u-vocab-api"
		property "sonar.organization", "uvocab"
		property "sonar.host.url", "https://sonarcloud.io"
		property "sonar.tests", [
			"${project.projectDir}/src/test/java",
			"${project.projectDir}/src/test/groovy",
		]
	}
}

tasks.named('sonar').configure {
	dependsOn jacocoTestReport
}

tasks.named('check') {
	dependsOn(testing.suites.integrationTest)
}

spotless {
	java {
		googleJavaFormat()
		target 'src/**/*.java'
	}
	groovy {
		greclipse()
	}
	groovyGradle {
		greclipse()
	}
}

docker {
	springBootApplication {
		baseImage = 'azul/zulu-openjdk:21.0.1'
	}
}

dockerCreateDockerfile {
	environmentVariable 'DB_USER', System.getenv('DB_USER') ?: ''
	environmentVariable 'DB_PASSWORD', System.getenv('DB_PASSWORD') ?: ''
	environmentVariable 'DB_HOST', System.getenv('DB_HOST') ?: ''
}

sourceSets {
	main {
		proto {
			srcDir 'u-vocab-protobuf/'
		}
	}
}

protobuf {
	protoc { artifact = "com.google.protobuf:protoc:3.24.3" }
}

tasks.withType(JavaCompile).configureEach {
	options.compilerArgs.add("-parameters")
}
