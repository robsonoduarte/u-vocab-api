plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.5'
	id 'io.spring.dependency-management' version '1.1.0'
	id "com.avast.gradle.docker-compose" version "0.16.12"
	id 'org.sonarqube' version '4.3.0.3225'
	id 'jacoco'
	id 'signing'
	id 'io.github.gradle-nexus.publish-plugin' version '1.3.0'
	id 'com.gradle.plugin-publish' version '1.2.0'

}
apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'maven-publish'


group = 'com'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '20'
archivesBaseName = 'gradle-docker-compose-plugin'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

jacoco { toolVersion = "0.8.10" }

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

dockerCompose.isRequiredBy(test)

jacocoTestReport {
	reports {
		xml.required = true
	}
	dependsOn test
}

sonar {
	properties {
		property "sonar.projectKey", "robsonoduarte_u-vocab-api"
		property "sonar.organization", "uvocab"
		property "sonar.host.url", "https://sonarcloud.io"
		property "sonar.tests", [
				"${project.projectDir}/src/test/java",
		]
	}
}

tasks.named('sonar').configure {
	dependsOn jacocoTestReport
}

repositories {
	mavenCentral()
}

dependencies {
	implementation gradleApi()
	implementation 'org.yaml:snakeyaml:2.0'
	testImplementation gradleTestKit()
	testImplementation 'org.spockframework:spock-core:2.1-groovy-2.5'
}

test {
	useJUnitPlatform()
	testLogging {
		events 'failed'
		exceptionFormat 'full'
	}
}

java {
	withJavadocJar()
	withSourcesJar()
}

afterEvaluate {
	publishing.publications.forEach {
		it.pom {
			name = 'Gradle Docker Compose plugin'
			description = 'Simplifies usage of Docker Compose for integration testing in Gradle environment.'
			url = 'https://github.com/avast/gradle-docker-compose-plugin'
			licenses {
				license {
					name = 'The MIT License'
					url = 'http://www.opensource.org/licenses/mit-license.php'
				}
			}
			developers {
				developer {
					id = 'augi'
					name = 'Michal August√Ωn'
					email = 'augustyn.michal@gmail.com'
				}
			}
			scm {
				connection = 'scm:git:git://github.com/avast/gradle-docker-compose-plugin.git'
				developerConnection = 'scm:git:ssh://github.com/avast/gradle-docker-compose-plugin.git'
				url = 'https://github.com/avast/gradle-docker-compose-plugin'
			}
		}
	}
}

signing {
	String base64Key = System.getenv('SIGNING_KEY')
	if (base64Key) {
		useInMemoryPgpKeys(new String(Base64.decoder.decode(base64Key)), System.getenv('SIGNING_PASSWORD'))
		sign publishing.publications
	}
}

nexusPublishing {
	repositories {
		sonatype()
	}
	transitionCheckOptions {
		maxRetries.set(256)
	}
}

gradlePlugin {
	plugins {
		dockerComposePlugin {
			id = 'com.avast.gradle.docker-compose'
			displayName = 'Gradle Docker Compose plugin'
			description = 'Simplifies usage of Docker Compose for integration testing in Gradle environment.'
			implementationClass = 'com.avast.gradle.dockercompose.DockerComposePlugin'
		}
	}
}